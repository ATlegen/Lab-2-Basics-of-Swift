
// –ó–∞–¥–∞–Ω–∏–µ 1

func intoduceMyself() {
    print("–ü—Ä–∏–≤–µ—Ç –º–µ–Ω—è –∑–æ–≤—É—Ç, –ê—Å–µ–º–≥—É–ª—å")
}
intoduceMyself()

// –ó–∞–¥–∞–Ω–∏–µ 2

var steps = 0

func incrementSteps() {
    steps += 1
    print("\(steps) üèÉ‚Äç‚ôÄÔ∏è")
}

incrementSteps()
incrementSteps()
incrementSteps()
incrementSteps()

let goal = 10_000.0
var urSteps = 11_000.0

func progressUpdate() {
    urSteps += 1
    if urSteps <= (goal*0.1) {
        print("–£ –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ")
    } else if urSteps <= (goal*0.5) {
        print("–í—ã –ø–æ—á—Ç–∏ –Ω–∞ –ø–æ–ª –ø—É—Ç–∏!")
    } else if urSteps <= (goal*0.9) {
        print("–í—ã –Ω–∞ –ø–æ–ª –ø—É—Ç–∏!")
    } else if urSteps < (goal) {
        print("–í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!")
    } else {
        print("–í—ã –ø—Ä–µ–≤–∑–æ—à–ª–∏ —Å–≤–æ—é —Ü–µ–ª—å! –í—ã —Å–¥–µ–ª–∞–ª–∏ \(Int(urSteps)) —à–∞–≥–æ–≤!")
    }
}

progressUpdate()

// –ó–∞–¥–∞–Ω–∏–µ 3

func introduction(_ name:String, _ home:String, _ age:Int) {
    print("\(name), –≤–æ–∑—Ä–∞—Å—Ç \(age), –≥–æ—Ä–æ–¥ \(home)")
}

introduction("–ê—Å–µ–º–≥—É–ª—å", "–£—Ä–∞–ª—å—Å–∫", 37)

// –ó–∞–¥–∞–Ω–∏–µ 4


func progressUpdate(_ steps2:Int, _ goal2:Int) {
    if steps2 <= ((goal2/100)*10) {
        print("–£ –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ")
    } else if steps2 <= ((goal2/100)*50) {
        print("–í—ã –ø–æ—á—Ç–∏ –Ω–∞ –ø–æ–ª –ø—É—Ç–∏!")
    } else if steps2 <= ((goal2/100)*90) {
        print("–í—ã –Ω–∞ –ø–æ–ª –ø—É—Ç–∏!")
    } else if steps2 < (goal2) {
        print("–í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!")
    } else {
        print("–í—ã –ø—Ä–µ–≤–∑–æ—à–ª–∏ —Å–≤–æ—é —Ü–µ–ª—å! –í—ã —Å–¥–µ–ª–∞–ª–∏ \(steps2) —à–∞–≥–æ–≤!")
    }
}
progressUpdate(950, 10_000)
progressUpdate(4500, 10_000)
progressUpdate(6000, 10_000)
progressUpdate(9999, 10_000)
progressUpdate(11_000, 10_000)


func pacing(currentDistance:Double, totalDistance:Double, currentTime:Double, goalTime:Double) {
    let pace = currentTime/(currentDistance/totalDistance)
    if pace < goalTime {
        print("–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–Ω–∞–ø—Ä—è—á—Å—è –Ω–µ–º–Ω–æ–≥–æ —Å–∏–ª—å–Ω–µ–µ!")
    } else {
        print("–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")
    }
}

// –ó–∞–¥–∞–Ω–∏–µ 5

func greeting(_ name: String) -> String {
    "–ü—Ä–∏–≤–µ—Ç \(name), –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"
}
print(greeting("–û–ª–∂–∞—Å"))

func formula(_ a:Int, _ b:Int) -> Int {
    (a * b) + 2
}
print(formula(3, 2))
